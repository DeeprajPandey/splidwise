FORMAT: 1A
HOST: https://fathomless-fortress-82121.herokuapp.com
# SpliDwise

Splidwise is an API that talks to hyperledger fabric to manage shared expenses.

A few nomenclature clarifications:
- `Transaction`: A hyperledger txn that goes on the blockchain. A txn records any modification to the world state.
- `Payment`: Representation of real world payments (bill-splits) between two registered users. Users can add these payments on the app.
- `Payment Link`: When any user (creditor) makes a payment for another user (debtor), a link between them is created and has a specific representation on the world state. Subsequent similar payments will be added to this link.

Note: all parameters in api calls (`user` emails) denote the registered account that is logged in on the app and is sending that request.

# Group General Resources

General resources that would be called by the app for global changes.

## List All Assets in World State [/queryAll]

### /queryAll [GET]

List of all the key-value pairs in the world state. Assets are either pairs of keys: tuples of (creditor, debtor) and values: arrays of user payments or keys: strings which denote the user IDs of registered users and values: objects with personal info.

Limit to 20 assets.

+ Response 200 (application/json)
    {
        "data": {
            "(creditor_uid3,debtor_uid1,1)": {
                "pmtid": 1,
                "amount": 20,
                "approved": false,
                "description": "Paid for dinner",
                "timestamp": "1586471276"
            },
            "(creditor_uid3,debtor_uid1,2)": {
                "pmtid": 2,
                "amount": 30,
                "approved": true,
                "description": "THC lunch",
                "timestamp": "1586554076"
            },
            "(creditor_uid117,debtor_uid60,1)": {
                "pmtid": 1,
                ...
            },
            "userid3": {
                "name": "Mahavir Jhawar",
                "lent_money_to": [["debtor_uid1",2], ["debtor_uid54",1], ["debtor_uid7",5]],
                "owes_money_to": ["creditor_uid12", "creditor_uid30"]
            }
        },
        "message": "Entire world state."
    }

## List All Payment Links [/queryAllLinks]

### /queryAllLinks [GET]

List of all the key-value pairs in the world state which represent `Payment Links` between any two registered users. Keys are tuples of (creditor, debtor) and values are arrays of user payments.

Limit to 20 assets.

+ Response 200 (application/json)
    {
        "data": {
            "(creditor_uid3,debtor_uid1,1)": {
                "pmtid": 1,
                "amount": 20,
                "approved": false,
                "description": "Paid for dinner",
                "timestamp": "1586471276"
            },
            "(creditor_uid3,debtor_uid1,2)": {
                "pmtid": 2,
                "amount": 30,
                "approved": true,
                "description": "THC lunch",
                "timestamp": "1586554076"
            },
            "(creditor_uid117,debtor_uid60,1)": {
                "pmtid": 1,
                "..."
            }
        },
        "message": "All payment links"
    }

## List All Registered Users [/queryAllUsers]

### /queryAllUsers [GET]

List of all the key-value pairs in the world state which denote an existing user. Keys are strings denoting usernames (emails) and values are objects with user-specific info.

Limit to 20 assets.

+ Response 200 (application/json)
    {
        "data": {
            "userid3": {
                "name": "Mahavir Jhawar",
                "lent_money_to": [["debtor_uid1",2], ["debtor_uid54",1], ["debtor_uid7",8]],
                "owes_money_to": ["creditor_uid12", "creditor_uid30"]
            },
            "userid14": {
                "name": "Debayan Gupta",
                "lent_money_to": [["debtor_uid23",1], ["debtor_uid2",12], ["debtor_uid11",4]],
                "owes_money_to": ["creditor_uid9", "creditor_uid12"]
            }
        },
        "message": "List of all users."
    }

## Create New User [/registerUser]

### /registerUser [POST]

Use this to create a new user for the app. It takes a JSON object with email and personal information in the form another object.

- username (string) - The email ID.
- info (mixed object) - Collection of personal details.

+ Request (application/json)
    {
        "username": "user1@protonmail.com",
        "info": {
            "name": "Fettered Darwin"
        }
    }

+ Response 201 (application/json)
    {
        "data": {
            "username": "user1@protonmail.com",
            "info": {
                "name": "Fettered Darwin",
                "lent_money_to": [],
                "owes_money_to": []
            }
        },
        "message": "User created successfully."
    }

# Group User Specific Resources

API calls expected to be made from registered user when they use the app. Registered usernames are almost always a part of the request object.

## Credit/Debt Summary [/{user}/getAmountOwed]

+ Parameters
    + user: user3@protonmail.com (string) - Globally unique identifier (email) for registered user. Will be checked both in wallet and world state.

### /{user}/getAmountOwed [POST]

Use this to get the credit-debt situation between two registered users. It takes a JSON object with creditor and debtor usernames.

This will usually be used by the creditor logged into the app and requesting to see a summary of money lent/owed to debtor. Receiving amount could be negative, effectively meaning the roles are reversed (handled on the frontend).

- creditor (string) - Email ID of the user lending money. This will be the same as `user` param.
- debtor (string) - Email ID of the user who is in debt.

+ Request (application/json)
{
    "creditor": "user1@protonmail.com",
    "debtor": "olduser43@protonmail.com"
}

+ Response 201 (application/json)
    {
        "data": {
            "creditor": "user1@protonmail.com",
            "debtor": "olduser43@protonmail.com",
            "amount_owed": -260,
            "unapproved_amount": 15
        },
        "message": "Credit [or] Debt calculated successfully."
    }

+ Response 404 (application/json)
    {
        "data": {},
        "message": "Creditor/debtor user not found."
    }

## Make Payment Between Users [/{user}/makePayment]

+ Parameters
    + user: user3@protonmail.com (string) - Globally unique identifier (email) for registered user. Will be checked both in wallet and world state.

### /{user}/makePayment [POST]

The creditor will use this to make a payment on behalf of the debtor. Both have to be registered users else it returns 404 with a message saying so. If a payment link does not exist then the chaincode will create a new link else it will add this payment to the array in the existing link.

Expected inputs:
- creditor (string) - Email ID of the user lending money. This will be the same as `user` param.
- debtor (string) - Email ID of the user for whom creditor is paying.
- amount (int) - The money being paid.
- description (string) - A helpful description for the payment.
- timestamp (unix time) - Time when the payment was added by creditor.

+ Request (application/json)
{
    "creditor": "user3@protonmail.com",
    "debtor": "olduser@protonmail.com",
    "amount": 30,
    "description": "THC Lunch",
    "timestamp": "1586554076"
}

+ Response 201 (application/json)
    {
        "data": {
            {
                "pmtid": 2,
                "amount": 30,
                "approved": false,
                "description": "THC lunch",
                "timestamp": "1586554076"
            }
        },
        "message": "Payment added to link."
    }

+ Response 404 (application/json)
    {
        "data": {},
        "message": "Creditor/debtor user not found."
    }

## Get All Unapproved Payments in Link [/{user}/getUnapprovedPayments]

+ Parameters
    + user: user3@protonmail.com (string) - Globally unique identifier (email) for registered user. Will be checked both in wallet and world state.

### /{user}/getUnapprovedPayments [POST]

The debtor will use this to get all the payments that a specified creditor made that are pending the debtor's approval. Both have to be registered users else it returns 404. Empty response if there are no payments pending approval.

Expected inputs:
- debtor (string) - Email ID of the user for whom creditor is paying. This will be the same as `user` param.
- creditor (string) - Email ID of the user lending money.

+ Request (application/json)
{
    "debtor": "user3@protonmail.com",
    "creditor": "user1@gmail.com"
}

+ Response 201 (application/json)
    {
        "data": {
            "debtor": "olduser@protonmail.com",
            "creditor": "user1@gmail.com",
            "all_unapproved_pmts": [
                {
                    "pmtid": 2,
                    "amount": 30,
                    "approved": false,
                    "description": "THC lunch",
                    "timestamp": "1586554076"
                },
                {
                    "pmtid": 7,
                    ...
                }
            ]
        },
        "message": "Unapproved payments found [or] No payments pending approval [or] Empty response returned, no payment link b/w users."
    }

+ Response 404 (application/json)
    {
        "data": {},
        "message": "Creditor/debtor user not found."
    }

## Approve a Single Payment Object [/{user}/approvePayment]

+ Parameters
    + user: user3@protonmail.com (string) - Globally unique identifier (email) for registered user. Will be checked both in wallet and world state.

### /{user}/approvePayment [POST]

The debtor will use this (after /getUnapprovedPayments with a particular creditor) to approve a payment that creditor maid on their behalf.

Note: this approves only one payment object whereas `/getUnapprovedPayments` returns an array of payment objects.

Expected inputs:
- debtor (string) - Email ID of the user for whom creditor is paying.  This will be the same as `user` param.
- creditor (string) - Email ID of the user lending money.
- payment_obj (mixed object) - The complete payment object where `approved` is set to false (this will be set to true by chaincode).

+ Request (application/json)
{
    "debtor": "user3@protonmail.com",
    "creditor": "user1@gmail.com",
    "payment_obj": {
        "pmtid": 2,
        "amount": 30,
        "approved": false,
        "description": "THC lunch",
        "timestamp": "1586554076"
    }
}

+ Response 201 (application/json)
    {
        "data": {
            "debtor": "user3@protonmail.com",
            "creditor": "user1@gmail.com",
            "payment_obj": {
                "pmtid": 2,
                "amount": 30,
                "approved": true,
                "description": "THC lunch",
                "timestamp": "1586554076"
            }
        },
        "message": "Payment approved."
    }

+ Response 404 (application/json)
    {
        "data": {},
        "message": "Payment data not found."
    }